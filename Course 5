Safeguarding Information

Moduel 1: Understanding Assets, Threats, and Vulnerabilities


Asset – Anything valuable that needs protection (e.g., data, hardware, software).
Threat – A potential danger to an asset (e.g., hackers, malware, insider threats).
Vulnerability – A weakness that can be exploited (e.g., outdated software, weak passwords).


We can safeguard this inforamtion via encryption
Access control: who has access



B. Encryption & Data Protection
Encryption: Converts data into unreadable code (AES-256 is industry standard).

Data at rest: Encrypt files on storage devices.
Data in transit: Use TLS/SSL for secure transmission over networks.
Data in use

data lifecycle
Collect
Store
Use
Archive
Destroy

Security Controls
Technical
Operation
managerial

Data goveranance
Data owner: the person that decides who can access, edit, use, or destroy their information.
Data custodian: anyone or anything that's responsible for the safe handling, transport, and storage of information.
Data steward: the person or group that maintains and implements data governance policies set by an organization.PII is any information used to infer an individual's identity. Personally identifiable information, or PII, refers to information that can be used to contact or locate someone.

PII (personaly Indetificable Information_: anything used to contact you
PHI (protected health information):  HIPAA
SPII (Sensitive PII) bank account, login, SNN
 > may be needed at specific moments: should be recorded when, why and who

Information privacy refers to the protection of unauthorized access and distribution of data.
Information security (InfoSec) refers to the practice of keeping data in all states away from unauthorized users.

-
Module 2: Encryption

Encryption: the process of converting data from a readable format to an encoded format
Public key infrastructure (PKI): an encryption framework that secures the exchange of online information
Cipher: an algorithm that encrypts information

Symmetric encryption is the use of a single secret key to exchange information. 
  Because it uses one key for encryption and decryption, the sender and receiver must know the secret key to lock or unlock the cipher.
  - requires a secure way to share the key between sender and receiver
  - faster and efficient for large amounts of data
 > Triple DES (3DES): applies DES encryption x3 for enhances security (168 bit key)
 > AES (Advanced Encryption Standards) uses 128, 192, or 256-bit keys

Asymmetric encryption is the use of a public and private key pair for encryption and decryption of data. 
  Public key is used to encrypt data, and the private key decrypts it. 
  CA (Certificare Authority) issues digital certificates, which verify the identity of a user or website and contain the public key
  private key is securely generated and stored by the recipient.
  > RSA

🔹 Public Key (🔓) → Open, shared freely, only encrypts data
🔹 Private Key (🔑) → Secret, stays with the bank, only decrypts data (never sent over the internet)

> Symmetric encryption: The encryption key must be shared between sender and receiver
    An attacker could intercepts the key during transmission and can decrypt everything
[
1️⃣ Browser requests a secure connection (https://)
2️⃣ Server sends RSA public key (verified by a CA)
3️⃣ Browser generates a random AES key
4️⃣ AES key is encrypted using RSA public key
5️⃣ Encrypted AES key is sent to the server
6️⃣ Server decrypts AES key with its RSA private key]
-
Generating keys
These algorithms must be implemented when an organization chooses one to protect their data. 
OpenSSL is an open-source command-line tool. It generates public & private keys for encryption.
Also used to verify digital certificates in Public Key Infrastructure (PKI) (e.g., HTTPS, SSL/TLS).

Obscurity is not security: A strong algorithm should remain secure even if its details are public—only the private key must be secret.
-
keys are vulnerable to getting lost and stolen

Hash function: One-way encryption that produces a fixed-size hash value; cannot be decrypted.
 Even a small change in input produces a completely different hash, making it ideal for data integrity checks.
 Each input is then first hashed then Hash values are compared (which can be quickly done by computers)
accomplished authentication and non-repudiation (information authenticity cannot be denied)


Hash Collisions
Hash collisions: Occur when different inputs produce the same hash value, posing a security risk (e.g., impersonation).
  Hash algorithms map any input, regardless of its length, into a fixed-size value of letters and numbers since there’s only a finite set of available outputs!
> Because hashes are used for authentication, a hash collision is similar to copying someone’s identity. 
>> Attackers can carry out collision attacks to fraudulently impersonate authentic data.

longer hashes is more secure: SHA (Secure Hashing Alogrithm) family
Numbers besides each SHA function indicate the size of its hash value in bits. Except for SHA-1, which produces a 160-bit digest (NIST approved)
Five functions make up the SHA family of algorithms:

SHA-1
SHA-224
SHA-256
SHA-384
SHA-512

Secure password storage: Passwords are hashed and stored; comparison is done with the hashed value to verify authenticity.
These are secured even if the data base is compromised due to hashing

Rainbow tables
A rainbow table is a file of pre-generated hash values and their associated plaintext. 
Hackers use them

Salting is an additional safeguard that's used to strengthen hash functions. 
A salt is a random string of characters that's added to data before it's hashed. The additional characters produce a more unique hash value, making salted data resilient to rainbow table attacks.

virusTotal
--
Module 2: Authentication, Authorization, And Accounting

Managing who or what has access to information
Access Control: Security controls that manage who can access what, ensuring:
✔️ Confidentiality – Protecting sensitive information.
✔️ Integrity – Preventing unauthorized modifications.
✔️ Availability – Ensuring users can access what they need.

It is broken down by the AAA framework (authentication, authorization, accounting)
Authentication → Who are you? (Verifying identity)
Authorization → What can you access? (Permissions)
Accounting → What did you do? (Logging & tracking)

-
Authentication
SSO 
A technology that combines multiple logins into one, allowing users to access several applications with a single authentication process.
✔️ Better User Experience: No need to remember multiple passwords.
✔️ Stronger Security: Reduces attack surfaces by centralizing authentication.
✔️ Cost Efficiency: Simplifies IT management & lowers password reset costs.
✔️ Prevents Password Fatigue: Users don’t reuse weak passwords across multiple sites.

Security Features of SSO
✔️ Centralized Authentication: Only one secure login instead of many weak passwords.
✔️ Reduces Phishing Risks: Users log in less often, reducing the chance of falling for fake login pages.
✔️ Uses Secure Tokens Instead of Passwords: Applications don’t store passwords—only trust temporary tokens issued by the IdP.
✔️ Supports Multi-Factor Authentication (MFA): Can add extra layers (e.g., SMS codes, biometrics, security keys).

How SSO Works (Step-by-Step)
1️⃣ User Requests Access
You enter credentials (username & password) on a site (e.g., Gmail).
Instead of Gmail verifying them, it redirects you to an Identity Provider (IdP) (e.g., Google’s authentication system).
2️⃣ Identity Provider Verifies Your Identity
IdP checks your credentials & confirms who you are.
If correct, the IdP issues an encrypted token containing your authentication details.
3️⃣ Token Sent to the Service Provider (SP)
Gmail (the Service Provider) receives this secure token from the IdP.
Instead of storing or handling your password, Gmail trusts the IdP’s verification.
4️⃣ Access Granted Across Services
Now, when you visit Google Drive or YouTube, they reuse the existing token instead of asking for a password again.

Limitations of SSO & How to Mitigate Risks
❌ Single Point of Failure: If an attacker gets your SSO password, they can access everything.
✔️ Solution: Use Multi-Factor Authentication (MFA) to add another layer of security.

❌ Remote Access Risks: Cloud-based SSO can be harder to secure for remote users.
✔️ Solution: Implement Zero Trust Security (always verify, never assume trust).


-
Authorization
Linked to two security princples:
Least privledge: access only last as long as needed
Seperation of duties: principle that users shuold not be given level of authrization that would allow them to misuse a systems

Continuing on SSO, authorization over web pages is controlled by auth protocols
HTTP uses basic auth
 technology used to establish a use's request to acess a server
 sends an identifier every time a user commuincates with a web page
 > transmit username and passwords openly so is vulnerable
HTTPS uses O Auth
 Open standard authorization protocol that shares designated access between application
 > uses API token to verify access between you and the service provider rather than passwords
     Tokens Replace Passwords
     Tokens Expire & Can Be Revoked
     Tokens Are Limited in Scope (oyu can read these files but can't delete them)
-
Auditing
Monitoring the access logs of systems
- who accessed the system
- when they accessed the system
- what resources they used
> identify trends and uncover malicious activity, finding data breach

User Access System
 Session Creation: When a user logs in, a sequence of authentication requests and responses is triggered, capturing the moment the user enters and exits the system.
Session Cookie:
 A temporary data file stored in the browser.
 Contains a session ID—a unique token that tracks your login session on a website.
Session ID:
 The unique token that identifies the user and their device during the session.
 Helps prevent attackers from obtaining sensitive data by maintaining the user's session securely.
Session Hijacking:
A type of attack where an attacker can impersonate the user by stealing and using the session token.
-
IAM (identify Access Managment): strategy framework that helps organizations manage digital identities in their environment. 
This is the overarching idea that we just learned

Authorization frameworks:
1. Mandatory access control (MAC)
   Strict need to know basis. Access to infroamtion must be granted manually by a central authority (like system admin)
   Commonly applied in law enforcement, military where there is a chain of comman.
   (non discretionary: because access isn’t given at the discretion of the data owner)
2. Discretionary access control (DAC)
  Data owner can decide appropriate levels of access
  (when I crete google docs I am the data owner and can decide who can view, edit, share)
3. Role-based access control (RBAC)
     authorization is determined by a user's role within an organization.

IT departments may develop custom IAM/AAA systems tailored to security needs, including a user directory, data management tools, authorization, and auditing.
Custom systems are costly in terms of time and resources.
Many organizations prefer to license third-party IAM solutions that provide a complete suite of tools for quickly securing information systems.
-
Moudel 3: vulnerabilities

Vulernability managamnet
CVE list
Attack surface
Common attack vectors


Vulernability weakness that can be exploited by a threat
Finding vulnerabilities by thinking of the exploits

Vulernability managamnet:
finding and patching vulnerabilities by thinking of exploits in thius cycle
1. identify
2. consider potential exploit of them
3. Prepare defenses against threat
4. evaluate the defenses

zero day exploits: newly discovered explot with zero days to fix it
- new form of spyware

Defense in depth: layered approach to vulnerability managment
1. Perimieter layer: outermost layer
2. Network Layer: Protect internal network traffic and communication between devices
3. End point: computers - protecting against unauthorized access
4. Application layer: secure application
5. Data layer, can be further brokwn down by asset classification: semsitive data stored in endpoint 


-
Online documentary of common vulnerabilties and exposure

CVE list
OWASP 10
Open Source intelligence


CVE (Common Vulnerabilities and Exposures)
 Created by MITRE Corp: Standardizes the categorization and identification of security vulnerabilities.
 CNA (CVE Numbering Authorities): Independently test vulnerabilities based on specific criteria:
   1. Independent of other issues: Fixing one issue should not require fixing another.
   2. Recognized security risk: Vulnerability must be a potential security risk.
   3. Supporting evidence: Evidence of the vulnerability must be submitted.
   4. Single codebase: Should only affect one specific codebase.
CVSS (Common Vulnerability Scoring System): Scores the severity of vulnerabilities to help prioritize fixes.
  Below 4.0: Low risk.
  Above 9.0: Critical and should be addressed immediately.
Purpose: CVE and CVSS are tools for vulnerability management, helping organizations prioritize which vulnerabilities to patch based on severity.

-
OWASP Top 10
The OWASP Top 10 highlights the 10 most targeted web application vulnerabilities, guiding businesses to design more secure software and prioritize security measures in their code.

Broken Access Control: Failure to restrict users from performing unauthorized actions (e.g., deleting articles or accessing restricted data).
Cryptographic Failures: Insufficient encryption, such as using weak algorithms (e.g., MD5), putting sensitive data at risk.
Injection: Malicious code inserted into an application, which can manipulate its behavior, e.g., SQL injection or XSS attacks.
Insecure Design: Applications not designed with security in mind, making them vulnerable to attacks.
Security Misconfiguration: Security settings not properly configured (e.g., default settings), making systems vulnerable.
Vulnerable and Outdated Components: Using outdated software libraries or components that have known vulnerabilities.
Identification and Authentication Failures: Weaknesses in the process of verifying user identities or securing access to sensitive resources.
Software and Data Integrity Failures: Insufficient review of patches and updates, potentially introducing vulnerabilities.
Security Logging and Monitoring Failures: Lack of proper logging and monitoring, making it difficult to detect and respond to attacks.
Server-Side Request Forgery (SSRF): Exploiting a server's functionality to send unauthorized requests to other resources, potentially leaking sensitive data.
Purpose: The OWASP Top 10 serves to increase awareness of critical security issues and help businesses prevent and fix common vulnerabilities in web applications.

-
Open Source Intelligence (OSINT)
OSINT refers to collecting and analyzing publicly available data to gain actionable insights. It is widely used in cybersecurity for proactive defense.

Key Uses of OSINT:
Provide insights into cyber attacks: Monitoring online activity to spot emerging attack trends or threats.
Detect data exposures: Identifying potential data leaks, like exposed sensitive information in public databases.
Evaluate existing defenses: Assessing security measures through public data to check for weaknesses.
Identify unknown vulnerabilities: Finding vulnerabilities that may not be widely known by gathering information from various sources, including forums and hacker communities.
Purpose: OSINT helps organizations stay aware of potential security threats, vulnerabilities, and emerging attack methods, enabling quick responses and proactive security measures.


Vulnerability: weakness in a system that can be threatnening
Exploit: when vulnerability is abused
--
Vulnerability Assesment: internal review process of an organization's security systems to Identify System Vulnerabilities

Vulnerability Assesment Process
1. Identification: snapshot of current state
2, Vulnerability analysis: testing each vulnerability to find source of the problem
3. Risk Assessment: how severe and liklihood
4. Remediation: Joint effort by Security and IT

Vulnerability Scanners

Purpose: Software that compares known vulnerabilities against network tech.
Non-intrusive: Scanners alert to vulnerabilities without breaking or exploiting systems. However, scans may occasionally cause issues like system crashes.
5 Attack Surfaces:
 Perimeter Layer: Authentication systems.
 Network Layer: Firewalls and network technologies.
 Endpoint Layer: Devices like laptops, desktops, and servers.
 Application Layer: Software interacting with users.
 Data Layer: Stored, in-transit, or in-use data.

External vs. Internal Scans
External Scans: Test outward-facing systems, like websites and firewalls. They uncover vulnerabilities in external-facing services.
Internal Scans: Examine internal systems, such as application software for user input weaknesses.

Authenticated vs. Unauthenticated Scans
Authenticated: Simulate access by a legitimate user or admin, checking for vulnerabilities like broken access controls.
Unauthenticated: Simulate external threats without access, identifying potential vulnerabilities that would normally be restricted (e.g., unauthorized file access).

Limited vs. Comprehensive Scans
Limited Scans: Focus on specific devices, like checking firewall misconfigurations.
Comprehensive Scans: Assess all devices on the network, including operating systems and databases.
Discovery Scanning

Recommended before limited or comprehensive scans. Helps identify computers, devices, and open ports on a network.

-
Penetration Testing

Red team tests simulate attacks to identify vulnerabilities in systems, networks, or applications.
Blue team tests focus on defense and incident response to validate an organization's existing security systems.
Purple team tests are collaborative, focusing on improving the security posture of the organization by combining elements of red and blue team exercises.


Penetration testing strategies
Pen Test Strategies: How much access and information do I need?

- Open-box testing is when the tester has the same privileged access that an internal developer would have—information like system architecture, 
data flow, and network diagrams. This strategy goes by several different names, including internal, full knowledge, white-box, and clear-box penetration testing.
- Closed-box testing: tester has little to no access to internal systems—similar to a malicious hacker. 
This strategy is sometimes referred to as external, black-box, or zero knowledge penetration testing.
- (gray-box testing) Partial knowledge testing is when the tester has limited access and knowledge of an internal system—for example, a customer service representative. 

Closed box testers tend to produce the most accurate simulations of a real-world attack. 

Becoming a penetration tester
All of the skills you’re learning in this program can help you advance towards a career in pen testing:
 Network and application security
 Experience with operating systems, like Linux
 Vulnerability analysis and threat modeling
 Detection and response tools
 Programming languages, like Python and BASH
 Communication skills

Bug bounty programs
Organizations commonly run bug bounty programs which offer freelance pen testers financial rewards for finding and reporting vulnerabilities in their products.
Bug bounties are great opportunities for amateur security professionals to participate and grow their skills. 
-
Cyber Attack Mindset

Get a sense of the attack surface and the enviroment around it


physical attack ksurface
people and their devices have:
- internal threat
- external threat

Advanced Persistent Threats (APT):
Definition: APTs involve long-term, stealthy unauthorized access to systems, often by state-sponsored actors or nation-states.
Targets: Can target both government agencies and private organizations, sometimes starting with private entities to reach larger, more sensitive targets.

Key Attack Vectors:
Direct Access: Physical access to a system.
Removable Media: Portable hardware like USB drives.
Social Media: Platforms for communication and content sharing.
Email: Personal and business accounts.
Wireless Networks: On-premises networks.
Cloud Services: Third-party cloud providers.
Supply Chains: Third-party vendors providing backdoor acces

As a security professional, it’s important to understand why someone would pose a threat to organizational assets. 
This includes recognizing that every threat actor isn’t intentionally out to cause harm.
-

Attack vector: The specific method or pathway an attacker uses to exploit a vulnerability.
Attack surface: total set of potential points where an attacker can try to gain unauthorized access or cause harm.

Identify a target
determine how the target can be accessed
evaluate attack vectors
find the tools of method of acttack

defending
educate
least privledges
using right security tools
Building a devierse security team

Fortify against brute force cyber attacks


Dictionary attacks are a similar technique except in these instances attackers use a list of commonly used credentials to access a system. This list is similar to matching a definition to a word in a dictionary.

Reverse brute force attacks are similar to dictionary attacks, except they start with a single credential and try it in various systems until a match is found.

Credential stuffing is a tactic in which attackers use stolen login credentials from previous data breaches to access user accounts at another organization. A specialized type of credential stuffing is called pass the hash. 
These attacks reuse stolen, unsalted hashed credentials to trick an authentication system into creating a new authenticated user session on the network.
Note: Besides access credentials, encrypted information can sometimes be brute forced using a technique known as exhaustive key search.

tool cracking
Aircrack-ng
Hashcat 
John the Ripper
Ophcrack
THC Hydra
---
Module 4: Common threats

Social Engineering in Cybersecurity
Social engineering is a manipulation technique used to trick people into bypassing security policies, standards, and procedures. 
Attackers often exploit human psychology to gain access to sensitive information or systems.

Stages of a Social Engineering Attack
1. Preparation – The attacker gathers information on the target.
2. Establishing Trust – The attacker builds credibility, often using persuasion tactics.
3. Exploitation – The attacker manipulates the target into taking an action (e.g., clicking a link, providing credentials).
4. Disengagement – The attacker disconnects after achieving their goal.
5. Common Social Engineering Tactics

-
1. Baiting
Relies on temptation to trick victims into compromising security.
Example: USB Baiting – An infected USB drive is left in a public place, hoping someone will plug it into their device.
2. Phishing
Uses digital communication (email, SMS, or fake websites) to steal sensitive data or deploy malware.
Phishing kits make attacks easy to launch, even for non-technical criminals.
Common phishing techniques:
 Malicious Attachments – Files that infect devices when opened.
 Fake Data Collection Forms – Websites that steal login credentials.
 Fraudulent Web Links – Direct users to malicious sites.
  Variants of Phishing:
  - Smishing – Uses SMS messages to impersonate legitimate sources.
  - Vishing – Uses voice calls to manipulate victims.
3. Quid Pro Quo
Involves offering a reward in exchange for sensitive information.
Example: An attacker pretends to be a bank representative offering lower interest rates but asks for account details.
4. Tailgating (Piggybacking)
Occurs when an unauthorized person follows an authorized individual into a restricted area.
5. Watering Hole Attacks
Attackers infect a frequently visited website to target specific users.
Example: The Holy Water attack (2020) compromised religious and charity websites.
-
Preventing Social Engineering Attacks
1. Phishing Prevention
 Implement anti-phishing policies in the workplace.
 Provide employee training to recognize phishing attempts.
 Use email access lists to filter suspicious messages.
 Deploy intrusion prevention and detection systems.
2. General Social Engineering Prevention
 Managerial controls to enforce security policies.
 Stay informed about new social engineering tactics.
 Encourage information sharing among employees to report threats.

-
Malware
Malware (malicious software) is designed to harm devices, networks, or users. 
It can spread physically (USB drives) or over networks and often operates without user permission or recognition.

Common Types of Malware

Virus
 Malicious code that interferes with computer operations, damaging data and software.
 Hides inside trusted applications and spreads when executed.
 Requires user activation to start the infection.
Worm
 Self-replicating malware that spreads across systems without user action.
 Uses an infected device to scan and spread through networks.
Trojan
 Malware disguised as a legitimate file or program.
 Often used to install additional threats like ransomware.
Ransomware
 Encrypts an organization's data and demands payment for decryption.
Spyware
 Gathers and sells user information without consent.
 Often hidden in bundleware (additional software installed with legitimate applications).


Fileless Malware
 Uses legitimate programs already on the system to infect devices.
 Runs in memory instead of storing files on disk, making it harder to detect.
Rootkits
 Grants attackers remote administrative control over a system.
 Delivered using:
 Dropper – A hidden malware file that installs the malicious code.
 Loader – Fetches additional malware from external sources.
Botnet
 A network of compromised devices ("bots") controlled remotely by a bot-herder.
 Used for large-scale cyberattacks, such as DDoS (Distributed Denial of Service).
Cryptojacking
 Secretly hijacks devices to mine cryptocurrency.
 Symptoms include system slowdown, high CPU usage, increased electricity costs, and crashes.

-
Potentially Unwanted Applications (PUAs)
PUAs are software that may not be outright malicious but can negatively impact system performance, security, or user privacy. They are often bundled with legitimate software or disguised as helpful tools.

Adware
 Displays intrusive advertisements, usually bundled with freeware.
 Can slow down devices or install additional unwanted software.
 Monetized by showing ads, often benefiting attackers rather than developers.
Scareware
 Uses fake security warnings to trick users into installing malware.
 Commonly spread via email spam or pop-ups.
 Can lead to the installation of more severe malware like trojans or ransomware.
Spyware (Sometimes Considered a PUA)
 Secretly collects user data and sends it to third parties.
 Often hidden in bundleware (software packages with unwanted extras).
-
Prevention:
Intrusion Detection Systems (IDS)
Malware-blocking browser extensions
Monitoring CPU usage


-
Web based scripting (cross site scripting)
malicious code or behavior used to take advantage of coding flaws in a web application
Since web application interact with multiple users attackers use injectiion attacks to and these websites and gain access to the user
 often this injection code is used to blend into the background
 this is easy as web applications are open to received data

XSS (Cross-site scripting)
Injection attack that inserts code into a vulnerable website or web app
exploiting HTML and Javascript giving access to cyber criminals everything that loads on a web page
 such as session cookies, geolocation, web cams and microphones
 1. Reflected: script is hidden and sent to the server and activated during the servers response
   
 2. Stored: it is injected directly onto the server via elements
  injected elements (photo) activate the malicious code when users visit the infected site
 3. DOM (Document object Module): script is written into the source code of the website
   attacks don't need to be sent to the server to active
> steal sensitive information



SQL injection categories
There are three main categories of SQL injection: 
Inband: data is extracted using the same channel that is used to inject the SQL code. This is the most straightforward attack, in which the retrieved data is presented directly in the application web page.
Out-of-band: data is retrieved using a different channel (An attacker sends a malicious query that makes the target website connect to a separate server they control.).
Inferential or Blind: there is no actual transfer of data. Still, the tester can reconstruct the information by sending particular requests and observing the resulting behavior of the DB Server.


how to prevent
Prepared statements: pre writing SQL queries with placeholders so user input is treated as data not code
Input Sanitization: Cleaning user input by removing characters or patterns that could be dangerous.
Input Validation: checking that the input matches expected patterns (email should be email@domain.com)
-
Threat Modeling:
1. define the scope
2. identify threat (threat actors)
  attack tree maps threat to assets
3. Characterize the enviroment
  apply a hacker mindeset
4. Analyze threats
5. Mitigate Risk
6. Evaluate Findings

Process for Attack Simulation and Threat Analysis (PASTA)
 threat modeling framework
1. Define business and security objectives 
   Identify what needs protection and why
2. Define the technical scope
   Understand the application environment
3. Decompose the application
   How the application handles data and which controls are in place
4. Perform a threat analysis
   Attacker mindset: identify potential threats and attack paths
5. Perform a vulnerability analysis
   Vulnerability Analysis	Check for weaknesses in the system
6. Conduct attack modeling
   Attack tree to map out how threats can be executed
7. Analyze risk and impact
   Assess the likelihood and impact of threats to prioritize and manage risk.
> Make informed security decisions to reduce the most critical risks.
























